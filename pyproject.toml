[tool.poetry]
name = "unireplknet"
version = "0.1.0"
description = "Universal Representation Learning with Large Kernel Networks"
authors = ["UniRepLKNet Team"]
readme = "README.md"
packages = [
    { include = "Audio" },
    { include = "Image" },
    { include = "Point" },
    { include = "Time-Series", from = "." },
    { include = "Video" },
    { include = "detection" },
    { include = "segmentation" }
]

[tool.poetry.dependencies]
python = "^3.8.1"
# Core ML/DL Dependencies
torch = ">=1.2"
torchvision = "*"
torchaudio = "*"
deepspeed = "*"
timm = "0.4.12"
triton = {version = "1.0.0", optional = true}
tensorboard = "2.9.0"
tensorboardX = "1.8"

# Data Processing
pandas = "*"
numpy = "*"
scipy = "*"
einops = "*"
scikit-learn = "*"

# Computer Vision
opencv-python = "*"
pillow = "*"
av = "*"
decord = {version = "*", optional = true}

# Visualization
matplotlib = "*"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.4.1"
pre-commit = "^3.3.3"

[tool.poetry.scripts]
test = "pytest:main"
tests = "pytest:main"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=.",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=0",
    "-vv",
    "--tb=short",
    "--maxfail=1"
]
markers = [
    "unit: Unit tests (fast, isolated tests)",
    "integration: Integration tests (may require external resources)",
    "slow: Slow tests (use sparingly)"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "setup.py",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
    "*/venv/*",
    "*/env/*",
    ".venv/*"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
exclude = [
    "tests/",
    "venv/",
    ".venv/",
    "build/",
    "dist/"
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"